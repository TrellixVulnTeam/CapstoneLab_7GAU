/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
export const MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
export class ModuleMapNgFactoryLoader {
    /**
     * @param {?} compiler
     * @param {?} moduleMap
     */
    constructor(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    load(loadChildrenString) {
        /** @type {?} */
        const offlineMode = this.compiler instanceof Compiler;
        /** @type {?} */
        const type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);
        }
        return offlineMode ?
            this.loadFactory((/** @type {?} */ (type))) : this.loadAndCompile((/** @type {?} */ (type)));
    }
    /**
     * @private
     * @param {?} factory
     * @return {?}
     */
    loadFactory(factory) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => resolve(factory)));
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    loadAndCompile(type) {
        return this.compiler.compileModuleAsync(type);
    }
}
ModuleMapNgFactoryLoader.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: undefined, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, { constructor: [], compiler: [], moduleMap: [], load: [], loadFactory: [], loadAndCompile: [] });
/** @nocollapse */
ModuleMapNgFactoryLoader.ctorParameters = () => [
    { type: Compiler },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.moduleMap;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0NHcmVlbmUxL3NvdXJjZS9yZXBvcy9UYXNrRnVsbFN0YWNrUHQyL1Rhc2tGdWxsU3RhY2tQdDIvQ2xpZW50QXBwL25vZGVfbW9kdWxlcy9Abmd1bml2ZXJzYWwvbW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyL2VzbTIwMTUvc3JjL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozt1SEFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgQ29tcGlsZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogVG9rZW4gdXNlZCBieSB0aGUgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyIHRvIGxvYWQgbW9kdWxlc1xuICogQHR5cGUgez99XG4gKi9cbmV4cG9ydCBjb25zdCBNT0RVTEVfTUFQID0gbmV3IEluamVjdGlvblRva2VuKCdNT0RVTEVfTUFQJyk7XG4vKipcbiAqIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB3aGljaCBkb2VzIG5vdCBsYXp5IGxvYWRcbiAqL1xuZXhwb3J0IGNsYXNzIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb21waWxlclxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlTWFwXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29tcGlsZXIsIG1vZHVsZU1hcCkge1xuICAgICAgICB0aGlzLmNvbXBpbGVyID0gY29tcGlsZXI7XG4gICAgICAgIHRoaXMubW9kdWxlTWFwID0gbW9kdWxlTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGxvYWRDaGlsZHJlblN0cmluZ1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbG9hZChsb2FkQ2hpbGRyZW5TdHJpbmcpIHtcbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICBjb25zdCBvZmZsaW5lTW9kZSA9IHRoaXMuY29tcGlsZXIgaW5zdGFuY2VvZiBDb21waWxlcjtcbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5tb2R1bGVNYXBbbG9hZENoaWxkcmVuU3RyaW5nXTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bG9hZENoaWxkcmVuU3RyaW5nfSBkaWQgbm90IGV4aXN0IGluIHRoZSBNT0RVTEVfTUFQYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZmxpbmVNb2RlID9cbiAgICAgICAgICAgIHRoaXMubG9hZEZhY3RvcnkoKC8qKiBAdHlwZSB7P30gKi8gKHR5cGUpKSkgOiB0aGlzLmxvYWRBbmRDb21waWxlKCgvKiogQHR5cGUgez99ICovICh0eXBlKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7P30gZmFjdG9yeVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbG9hZEZhY3RvcnkoZmFjdG9yeSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKC8qKlxuICAgICAgICAgKiBAcGFyYW0gez99IHJlc29sdmVcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIHJlc29sdmUgPT4gcmVzb2x2ZShmYWN0b3J5KSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbG9hZEFuZENvbXBpbGUodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21waWxlci5jb21waWxlTW9kdWxlQXN5bmModHlwZSk7XG4gICAgfVxufVxuTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbk1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlci5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IENvbXBpbGVyIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW01PRFVMRV9NQVAsXSB9XSB9XG5dO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIucHJvdG90eXBlLmNvbXBpbGVyO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLnByb3RvdHlwZS5tb2R1bGVNYXA7XG59XG4iXX0=